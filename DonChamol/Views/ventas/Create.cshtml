@model CrearVentaViewModel
@{
    ViewData["Title"] = "Registrar Venta";
}

<!-- Incluye el CSS de Font Awesome y SweetAlert -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<div class="container mt-4">
    <h2 class="text-center mb-4">Registrar Venta</h2>

    <form method="post" id="formularioVenta" class="border p-4 rounded bg-light">
        <div class="mb-3">
            <label class="form-label">Cliente</label>
            <select id="seleccionarCliente" class="form-select">
                <option value="">Seleccione un cliente</option>
                @foreach (var cliente in Model.Clientes)
                {
                    <option value="@cliente.id_Cliente">@cliente.Nombre</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Empleado</label>
            <select id="seleccionarEmpleado" class="form-select">
                <option value="">Seleccione un Mesero</option>
                @foreach (var mesero in Model.Meseros)
                {
                    <option value="@mesero.id_Mesero">@mesero.Nombre</option>
                }
            </select>
        </div>

        <div class="mb-3">
            <label class="form-label">Fecha de Venta</label>
            <input id="fechaVenta" type="date" class="form-control" value="@DateTime.Now.ToString("yyyy-MM-dd")" readonly />
        </div>

        <div class="row mb-3">
            <div class="col-md-6">
                <label class="form-label">Producto</label>
                <select id="seleccionarProducto" class="form-select">
                    <option value="">Seleccione un producto</option>
                    @foreach (var producto in Model.Productos)
                    {
                        <option value="@producto.id_producto">@producto.nombre_producto</option>
                    }
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label">Cantidad</label>
                <input id="inputCantidad" type="number" class="form-control" />
            </div>
            <div class="col-md-3">
                <label class="form-label">Precio Unitario</label>
                <input id="inputPrecioUnitario" type="number" step="0.01" class="form-control" readonly />
            </div>
        </div>

        <button type="button" id="agregarDetalle" class="btn btn-primary mb-4">Agregar Producto</button>

        <div class="mb-3">
            <label class="form-label">Detalles</label>
            <table id="tablaDetalles" class="table table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th>Producto</th>
                        <th>Cantidad</th>
                        <th>Precio Unitario</th>
                        <th>Total Línea</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Inicialmente vacío -->
                </tbody>
            </table>
        </div>

        <button type="button" id="guardarVenta" class="btn btn-success">Guardar</button>
    </form>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const productoSelect = document.getElementById('seleccionarProducto');
            const precioUnitarioInput = document.getElementById('inputPrecioUnitario');

            // Cargar precio al seleccionar producto
            productoSelect.addEventListener('change', function () {
                const productoId = productoSelect.value;

                if (productoId) {
                    // Llamada AJAX al método del controlador para obtener el precio
                    fetch(`/Ventas/ObtenerPrecioProducto?idProducto=${productoId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                precioUnitarioInput.value = data.precio.toFixed(2);
                            } else {
                                precioUnitarioInput.value = "";
                                Swal.fire('Error', data.mensaje, 'error');
                            }
                        })
                        .catch(error => {
                            console.error('Error al obtener el precio:', error);
                            Swal.fire('Error', 'Hubo un problema al cargar el precio del producto.', 'error');
                        });
                } else {
                    precioUnitarioInput.value = ""; // Limpiar si no se selecciona producto
                }
            });

            // Agregar detalle a la tabla
            document.getElementById('agregarDetalle').addEventListener('click', function () {
                const productoSeleccionadoId = productoSelect.value;
                const productoSeleccionadoTexto = productoSelect.options[productoSelect.selectedIndex]?.text || "";
                const cantidad = parseFloat(document.getElementById('inputCantidad').value) || 0;
                const precioUnitario = parseFloat(precioUnitarioInput.value) || 0;
                const totalLinea = (cantidad * precioUnitario).toFixed(2);

                if (!productoSeleccionadoId || cantidad <= 0 || precioUnitario <= 0) {
                    Swal.fire('Error', 'Seleccione un producto válido y complete los campos.', 'error');
                    return;
                }

                const tabla = document.getElementById('tablaDetalles').getElementsByTagName('tbody')[0];
                const numeroFila = tabla.rows.length;
                const fila = tabla.insertRow(numeroFila);

                fila.innerHTML = `
                                    <td>
                                        <input type="hidden" name="DetallesVenta[${numeroFila}].id_producto" value="${productoSeleccionadoId}" />
                                        ${productoSeleccionadoTexto}
                                    </td>
                                    <td>
                                        <input type="hidden" name="DetallesVenta[${numeroFila}].Cantidad" value="${cantidad}" />
                                        ${cantidad}
                                    </td>
                                    <td>
                                        <input type="hidden" name="DetallesVenta[${numeroFila}].PrecioUnitario" value="${precioUnitario}" />
                                        ${precioUnitario.toFixed(2)}
                                    </td>
                                    <td>
                                        <input type="hidden" name="DetallesVenta[${numeroFila}].TotalLinea" value="${totalLinea}" />
                                        ${totalLinea}
                                    </td>
                                    <td>
                                        <button type="button" class="btn btn-danger" onclick="this.closest('tr').remove()">Eliminar</button>
                                    </td>
                                `;

                limpiarInputs();
            });

            // Limpiar campos después de agregar
            function limpiarInputs() {
                document.getElementById('seleccionarProducto').value = "";
                document.getElementById('inputCantidad').value = "";
                precioUnitarioInput.value = "";
            }

            // Guardar venta
            document.getElementById('guardarVenta').addEventListener('click', async function () {
                const clienteSelect = document.getElementById('seleccionarCliente');
                const MeseroSelect = document.getElementById('seleccionarEmpleado');
                const fechaVenta = document.getElementById('fechaVenta').value;
                const tablaDetalles = document.getElementById('tablaDetalles').getElementsByTagName('tbody')[0];

                if (!clienteSelect.value || !MeseroSelect.value || tablaDetalles.rows.length === 0) {
                    Swal.fire('Error', 'Seleccione un cliente, un empleado y agregue al menos un producto.', 'error');
                    return;
                }

                const venta = {
                    id_Cliente: clienteSelect.value,
                    id_Mesero: MeseroSelect.value, // Pasar el id del empleado seleccionado
                    FechaVenta: fechaVenta,
                    DetallesVenta: Array.from(tablaDetalles.rows).map(fila => ({
                        id_producto: fila.querySelector('input[name$=".id_producto"]').value,
                        Cantidad: fila.querySelector('input[name$=".Cantidad"]').value,
                        PrecioUnitario: fila.querySelector('input[name$=".PrecioUnitario"]').value
                    }))
                };

                Swal.fire({
                    title: '¿Confirmar venta?',
                    text: "¿Desea guardar esta venta?",
                    icon: 'question',
                    showCancelButton: true,
                    confirmButtonColor: '#28a745',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Sí, guardar',
                    cancelButtonText: 'Cancelar'
                }).then(async (result) => {
                    if (result.isConfirmed) {
                        const response = await fetch('/Ventas/CrearVenta', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify(venta)
                        });

                        if (response.ok) {
                            Swal.fire('Guardado', 'La venta ha sido registrada con éxito.', 'success').then(() => {
                                window.location.href = '/Ventas/Get';
                            });
                        } else {
                            Swal.fire('Error', 'Hubo un problema al guardar la venta.', 'error');
                        }
                    }
                });
            });
        });
    </script>
}
